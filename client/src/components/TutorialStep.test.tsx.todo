// import React from 'react';
// import { render, screen } from '../test-utils/test-wrapper';
// import { TutorialStep } from './TutorialStep';
// import type { TutorialStep as TutorialStepType } from '../lib/tutorial/tutorialSteps';

// describe('TutorialStep', () => {
//   const mockStep: TutorialStepType = {
//     title: 'Test Title',
//     content: 'Test content',
//     placement: 'top'
//   };

//   const defaultProps = {
//     step: mockStep,
//     onComplete: jest.fn(),
//     onSkip: jest.fn(),
//     isLastStep: false
//   };

//   beforeEach(() => {
//     jest.clearAllMocks();
//   });

//   it('renders basic step correctly', () => {
//     render(<TutorialStep {...defaultProps} />);

//     expect(screen.getByText('Test Title')).toBeInTheDocument();
//     expect(screen.getByText('Test content')).toBeInTheDocument();
//   });

//   it('handles spotlight steps', () => {
//     const spotlightStep: TutorialStepType = {
//       title: 'Spotlight Step',
//       content: 'Spotlight content',
//       target: '#spotlight-element',
//       placement: 'bottom'
//     };

//     render(<TutorialStep {...defaultProps} step={spotlightStep} />);

//     expect(screen.getByText('Spotlight Step')).toBeInTheDocument();
//     expect(screen.getByText('Spotlight content')).toBeInTheDocument();
//   });

//   it('shows correct button text for last step', () => {
//     render(<TutorialStep {...defaultProps} isLastStep={true} />);

//     expect(screen.getByText('tutorial.common.last')).toBeInTheDocument();
//     expect(screen.queryByText('tutorial.common.next')).not.toBeInTheDocument();
//   });

//   it('calls onComplete when next/finish button is clicked', () => {
//     render(<TutorialStep {...defaultProps} />);

//     screen.getByText('tutorial.common.next').click();
//     expect(defaultProps.onComplete).toHaveBeenCalled();
//   });

//   it('calls onSkip when skip button is clicked', () => {
//     render(<TutorialStep {...defaultProps} />);

//     screen.getByText('tutorial.common.skip').click();
//     expect(defaultProps.onSkip).toHaveBeenCalled();
//   });

//   it('handles steps with complex content', () => {
//     const complexStep: TutorialStepType = {
//       title: 'Complex Step',
//       content: 'Complex content with <em>emphasis</em>',
//       placement: 'right'
//     };

//     render(<TutorialStep {...defaultProps} step={complexStep} />);

//     expect(screen.getByText('Complex Step')).toBeInTheDocument();
//     expect(screen.getByText(/Complex content with/)).toBeInTheDocument();
//   });
// });